blueprint:
  name: SGDevice - Temperature Controlled Fans
  description: |
    Control fans (switches) based on temperature readings.
  
  domain: automation
  source_url: https://github.com/sondregronas/hass-blueprints/blob/main/automations/Temperature%20Controlled%20Fans.yaml
  input:
    fans:
      name: Fans (Switches)
      description: The fans to control with the switch.
      default: [ ]
      selector:
        entity:
          domain: switch
          multiple: true
    
    temperature_sensor:
      name: Temperature Sensor
      description: The temperature sensor to use for controlling the fans.
      default: ''
      selector:
        entity:
          domain: sensor
          device_class: temperature
    
    temperature_on:
      name: Temperature On
      description: The temperature threshold to turn on the fans.
      default: 25.0
      selector:
        number:
          min: 10
          max: 30
          unit_of_measurement: "°C"
          mode: slider
          step: .5

    temperature_on_sensor:
      name: Temperature On Sensor
      description: Overrides the "Temperature On" value with the value from this sensor, if it is available. (Only uses the first sensor)
      default: [ ]
      selector:
        entity:
          domain: sensor
          device_class: temperature
          multiple: true

    temperature_off:
      name: Temperature Off
      description: The temperature threshold to turn off the fans.
      default: 23.0
      selector:
        number:
          min: 10
          max: 30
          unit_of_measurement: "°C"
          mode: slider
          step: .5

    temperature_off_sensor:
      name: Temperature Off Sensor
      description: Overrides the "Temperature Off" value with the value from this sensor, if it is available. (Only uses the first sensor)
      default: [ ]
      selector:
        entity:
          domain: sensor
          device_class: temperature
          multiple: true

mode: restart
max_exceeded: silent

variables:
  _temperature_sensor: !input temperature_sensor
  current_temperature: "{{ states(_temperature_sensor) | float }}"

  _temperature_on_threshold: !input temperature_on
  _temperature_off_threshold: !input temperature_off
  _temperature_on_sensor: !input temperature_on_sensor
  _temperature_off_sensor: !input temperature_off_sensor

  temperature_on: "{{ (states(_temperature_on_sensor[0]) if _temperature_on_sensor else _temperature_on_threshold) | float }}"
  _temperature_off: "{{ (states(_temperature_off_sensor[0]) if _temperature_off_sensor else _temperature_off_threshold) | float }}"
  temperature_off: "{{ min(temperature_on - 1.0, _temperature_off) | float }}"

trigger:
  - platform: state
    entity_id: !input temperature_sensor

action:
  - variables:
      # Determine the desired state of the fan based on the current temperature
      fan_state: "{{ 'on' if current_temperature >= temperature_on else 'off' }}"
      # Only turn off the fan if the temperature is below the off threshold, not inbetween the on and off thresholds
      is_below_threshold: "{{ current_temperature <= temperature_off }}"
  - repeat:
      for_each: !input fans
      sequence:
        # Guard clause to prevent switching the fan if it is already in the desired state (probably unnecessary)
        - condition: template
          value_template: "{{ not is_state(states(repeat.item), fan_state) }}"
        - choose:
            # Turn on the fan if the temperature is above or equal to the on threshold
            - conditions: "{{ fan_state == 'on' }}"
              sequence:
                - service: switch.turn_on
                  target:
                    entity_id: "{{ repeat.item }}"
            # Turn off the fan if the temperature is below the off threshold
            - conditions: "{{ fan_state == 'off' and is_below_threshold }}"
              sequence:
                - service: switch.turn_off
                  target:
                    entity_id: "{{ repeat.item }}"
