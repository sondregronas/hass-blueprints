blueprint:
  name: SGScript - Snapshot Lights In Areas
  description: >
    A script to snapshot the state of all lights in an area. 
    
    Only snapshots areas if any light is on in the area.
    
    **NOTE:** Scenes do not survive restarts.
  source_url: https://github.com/sondregronas/hass-blueprints/blob/main/scripts/Snapshot%20Lights%20In%20Areas.yaml
  domain: script
  input:
    included_areas:
      name: Included Areas
      description: Will be all areas if none are selected.
      default: [ ]
      selector:
        area:
          multiple: true

    excluded_areas:
      name: Excluded Areas
      description: The areas to exclude. (i.e. outdoor areas)
      default: [ ]
      selector:
        area:
          multiple: true

    included_devices:
      name: Included Lights
      description: If you want to include specific lights that are not in the specified areas.
      default: [ ]
      selector:
        entity:
          domain: light
          multiple: true

    excluded_devices:
      name: Excluded Lights
      description: For lights you want to exclude from the snapshot, even if they are in an included area.
      default: [ ]
      selector:
        entity:
          domain: light
          multiple: true

    id:
      name: Scene ID (Do not use spaces)
      description: >
        The ID of the generated scene (if you want to use multiple snapshots) 
        
        Generated scene will be `scene.sg_snapshot_<id>`
      default: 'all_areas'
      selector:
        text: { }

variables:
  id: !input id

  _all_areas: "{{ areas() }}"
  _included_areas: !input included_areas
  _excluded_areas: !input excluded_areas
  _areas: "{{_included_areas if _included_areas else _all_areas}}"

  _included_devices: !input included_devices
  _excluded_devices: !input excluded_devices

  # Filter out excluded areas
  areas: "{{ set(_areas) - set(_excluded_areas) }}"

  turned_on_lights_in_area: >
    {% set ns = namespace(turned_on_lights=[]) %}
    {% for device in _included_devices %}
      {% set ns.turned_on_lights = ns.turned_on_lights + [device] %}
    {% endfor %}
    {% for area in areas %}
        {% if expand(area_entities(area)) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'on') | list %}
        {% for entity in expand(area_entities(area)) %}
          {% if entity.domain == 'light' and entity.entity_id not in _excluded_devices %}
            {% set ns.turned_on_lights = ns.turned_on_lights + [entity.entity_id] %}
          {% endif %}
        {% endfor %} 
        {% endif %}
    {% endfor %}
    {{ set(ns.turned_on_lights) }}

sequence:
  - service: scene.create
    data:
      scene_id: "sg_snapshot_{{ id }}"
      snapshot_entities: "{{ turned_on_lights_in_area }}"