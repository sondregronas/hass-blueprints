# https://github.com/zigpy/zha-device-handlers/issues/940#issuecomment-1001107154

# TODO: Default behavior for turning on/off lights should remember the previous state of the light.

blueprint:
  name: Aqara H1 Switch (ZHA)
  description: |
      Blueprint to integrate the Aqara H1 Switch (ZHA) with Home Assistant.
      Run actions on button presses.

  domain: automation
  source_url: https://github.com/sondregronas/hass-blueprints/blob/main/devices/Aqara%20H1%20Switch%20ZHA.yaml
  input:
    switches:
      name: Aqara H1 Switch
      description: The Aqara H1 Switch device.
      selector:
        device:
          model: lumi.remote.b28ac1
          multiple: true
    area:
      name: Area
      description: The area to control. (Only affects default behavior)
      selector:
        area: {}

    # TODO: Build-in the ability to override any other automation that might interfere with the lights, i.e. motion sensors.
    #       for now this can be done by using the optional_action inputs.
    optional_action:
      name: Any button pressed action
      description: An optional action to run before the button press actions. (e.g. turn off lights when motion is detected)
      default: []
      selector:
        action: {}

    left_1x:
      name: Left Button Single Press
      description: By default every light in the area will be turned on.
      default: []
      selector:
        action: {}
    left_2x:
      name: Left Button Double Press
      description: By default `scene.<area_name>_bright` will be activated.
      default: []
      selector:
        action: {}
    left_3x:
      name: Left Button Triple Press
      #description:
      default: []
      selector:
          action: {}
    left_hold:
      name: Left Button Hold
      #description:
      default: []
      selector:
          action: {}
    right_1x:
      name: Right Button Single Press
      description: By default every light in the area will be turned off.
      default: []
      selector:
          action: {}
    right_2x:
      name: Right Button Double Press
      description: By default `scene.<area_name>_dim` will be activated.
      default: []
      selector:
          action: {}
    right_3x:
      name: Right Button Triple Press
      #description:
      default: []
      selector:
          action: {}
    right_hold:
      name: Right Button Hold
      #description:
      default: []
      selector:
          action: {}
    both_1x:
      name: Both Buttons Single Press
      #description:
      default: []
      selector:
          action: {}
    both_2x:
      name: Both Buttons Double Press
      description: By default sets every light in the area to a random color, only affects lights with color support.
      default: []
      selector:
          action: {}
    both_3x:
      name: Both Buttons Triple Press
      #description:
      default: []
      selector:
          action: {}
    both_hold:
      name: Both Buttons Hold
      #description:
      default: []
      selector:
          action: {}

mode: restart
max_exceeded: silent

variables:
  switches: !input switches

  area: !input area
  area_name: "{{ area | lower | replace(' ', '_') }}"
  light_entities: "{{ expand(area_entities(area)) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}"
  light_entities_with_hs_color: "{{ expand(light_entities) | selectattr('attributes.hs_color', 'defined') | map(attribute='entity_id') | list }}"

  optional_action: !input optional_action

  left_1x: !input left_1x
  left_2x: !input left_2x
  left_3x: !input left_3x
  left_hold: !input left_hold
  right_1x: !input right_1x
  right_2x: !input right_2x
  right_3x: !input right_3x
  right_hold: !input right_hold
  both_1x: !input both_1x
  both_2x: !input both_2x
  both_3x: !input both_3x
  both_hold: !input both_hold

trigger:
  platform: event
  event_type: zha_event

condition:
- condition: template
  value_template: "{{ trigger.event.data.device_id in switches }}"

action:
- variables:
    command: "{{ trigger.event.data.command }}"

- choose:
    - conditions : "{{ optional_action != [] }}"
      sequence: !input optional_action

- choose:
  # Left button
  ##############################
  - conditions: "{{ command == '1_single' }}"
    sequence:
    - choose:
        - conditions: "{{ left_1x != [] }}"
          sequence: !input left_1x
      default:
        - repeat:
            for_each: "{{ light_entities }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ repeat.item }}"
  - conditions: "{{ command == '1_double' }}"
    sequence:
    - choose:
        - conditions: "{{ left_2x != [] }}"
          sequence: !input left_2x
      default:
        - service: scene.turn_on
          target:
            entity_id: scene.{{ area_name }}_bright
  - conditions: "{{ command == '1_triple' }}"
    sequence: !input left_3x
  - conditions: "{{ command == '1_hold' }}"
    sequence: !input left_hold

  # Right button
  ##############################
  - conditions: "{{ command == '2_single' }}"
    sequence:
    - choose:
        - conditions: "{{ right_1x != [] }}"
          sequence: !input right_1x
      default:
        - repeat:
            for_each: "{{ light_entities }}"
            sequence:
              - service: light.turn_off
                target:
                  entity_id: "{{ repeat.item }}"
  - conditions: "{{ command == '2_double' }}"
    sequence:
    - choose:
        - conditions: "{{ right_2x != [] }}"
          sequence: !input right_2x
      default:
        - service: scene.turn_on
          target:
            entity_id: scene.{{ area_name }}_dim
  - conditions: "{{ command == '2_triple' }}"
    sequence: !input right_3x
  - conditions: "{{ command == '2_hold' }}"
    sequence: !input right_hold

  # Both buttons
  ##############################
  - conditions: "{{ command == '3_single' }}"
    sequence: !input both_1x

  # Set every light in a light group to a random color (only affects lights with color support)
  - conditions: "{{ command == '3_double' }}"
    sequence:
    - choose:
      - conditions: "{{ both_2x != [] }}"
        sequence: !input both_2x
      default:
      - repeat:
          # Repeat for each light in the area
          for_each: "{{ light_entities_with_hs_color }}"
          sequence:
            # Set the light to a random color
            - service: light.turn_on
              target:
                entity_id: "{{ repeat.item }}"
              data_template:
                hs_color:
                  - "{{ range(0, 360) | random }}"
                  - 100  # Full saturation

  - conditions: "{{ command == '3_triple' }}"
    sequence: !input both_3x
  - conditions: "{{ command == '3_hold' }}"
    sequence: !input both_hold
